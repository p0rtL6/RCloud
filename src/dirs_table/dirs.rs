//! SeaORM Entity. Generated by sea-orm-codegen 0.8.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel)]
#[sea_orm(table_name = "dirs")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = true)]
    pub dir_id: i32,
    pub dir_name: String,
    #[sea_orm(unique)]
    pub full_path: String,
    pub parent_dir_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::ParentDirId",
        to = "Column::DirId",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    SelfRef,
}

impl Related<Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SelfRef.def()
    }
}

impl Related<crate::Files> for Entity {
    fn to() -> RelationDef {
        crate::FilesRelation::Dirs.def()
    }
}

pub struct SelfReferencingLink;

impl Linked for SelfReferencingLink {
    type FromEntity = Entity;

    type ToEntity = Entity;

    fn link(&self) -> Vec<RelationDef> {
        vec![Relation::SelfRef.def()]
    }
}

impl ActiveModelBehavior for ActiveModel {}
